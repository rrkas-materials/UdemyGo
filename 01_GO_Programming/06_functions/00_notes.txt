syntax:
    declaration:
	func (receiver) identifier(parameters) (return(s)) {
        statements
    }

    calling:
    variable(s) = identifier(arguments)




NOTE:   everything is passed by value

defer----------------------------
    A "defer" statement invokes a function whose execution is deferred to the moment the surrounding function returns, 
    either because the surrounding function executed a return statement, reached the end of its function body, 
    or because the corresponding goroutine is panicking.
    deferred functions are invoked immediately before the surrounding function returns, 
    in the reverse order they were deferred. 
    That is, if the surrounding function returns through an explicit return statement, 
    deferred functions are executed after any result parameters are set by that return statement 
    but before the function returns to its caller. If a deferred function value evaluates to nil, 
    execution panics when the function is invoked, not when the "defer" statement is executed.


interface--------------------------
    An interface type specifies a method set called its interface. 
    A variable of interface type can store a value of any type with a method set that is any superset of the interface. 
    Such a type is said to implement the interface. 
    The value of an uninitialized variable of interface type is nil.



